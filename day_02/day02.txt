git指令

1-git仓库的状态与区域
  3个区域
  工作区 :工作的区域 用于写作代码的空间
  暂存区 
  当前head指向的分支（master区）

  4个状态
    unmodified:工作区以及暂存区中没有任何需要提交的修改 工作区很干净
    untracked:仓库中有新建的文件 但是还没有提交过 没有被纳入到git的控制之中
    modified:有文件被修改 但是还没有提交到暂存区
    staged:工作区的修改以及被提交到暂存区，即已经执行过git add命令  在等待被提交 master
2-撤销修改
    1-撤销工作区的修改
      git checkout -- 文件名
      文件修改以后没有被执行 git add指令
    2-撤销暂存区的修改
      文件已经被修改 并且已经执行富哦git add  但是还没有git commit
        分两步：
              撤销暂存操作：git reset HEAD 文件名
              撤销工作区的修改:git checkout -- 文件名
    3-撤销master的修改
      无法撤销，但是可以通过版本回退的方式
        撤销前，先查看提交的id 确定需要回退到哪个版本
          git reset -- hard 提交的id

      查看提交信息/存盘点
        git log
          如果查询的提交过多 无法一次性全部显示  可以按shift+Q 提前结束

        git log --pretty=oneline

  -关于存盘点（head）
    实现版本的控制
      git中吧每一次的提交都会串成一条时间线  这个时间线就是一条分支   默认只有一条分支：master  也称之为主分支
      而HEAD指向的就是当前分支



  分支
   -创建分支
      git branch 分支名
      将当前所在的分支复制一条 新的分支管出来
   -查看当前所有的分支
      git branch
      其中前面有*的表示当前所在分支
   -切换分支
      git checkout 分支名
      在分支上的操作不会影响其他分支上的数据
   -合并分支
      git merge 分支名
      将制定名称的分支的内容合并到当前分支
      eg：
          在master分支下使用git merge v1
          将v1的分支的内容合并到master中
          master分支的内容发生改变 v1分支内容不会改变
练习：
在d盘新建文件夹test  初始化本地仓库
新建文件1.txt  提交
修改1.txt内容 查看仓库的状态有什么变化  并提交
新建文件2.txt 查看仓库的变化 提交
修改2.txt内容 提交
修改1.txt内容 查看状态 撤销1.txt的修改
修改2.txt内容 并提交到暂存区 查看状态后 撤销2.txt的修改
修改1.txt 2.txt内容 然后提交 add.commit
查看提交的信息 存盘点
将仓库的内容回退到第四步